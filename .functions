search() { grep -Ri $1 ./ }
mg() { mkdir "$@" && cd "$@" || exit; }
mgn() { mkdir "$@" && cd "$@" && npm init -y || exit; }
cdl() { cd "$@" && ll; }
npm-latest() { npm info "$1" | grep latest; }
npm-next() { npm info "$1" | grep next; }
mdn() { default_browser "https://mdn.io/$@" }
can() { default_browser "https://caniuse.com/#search=$@" }
remote-update() { git remote set-url origin "git@github.com:eowino/$@.git" } # e.g. remote-update repo-name
git-create() { git create -o -d "$@" && git push -u origin master }
git-create-private() { git create -p -o -d "$@" && git push -u origin master }
update-vimrc() { cp ~/Documents/Projects/dotfiles/.vimrc ~/ }
pushup() {
    local branchName="$(git branch | grep \* | cut -d ' ' -f2)"
    git push --set-upstream origin $branchName
}
delete-branches() {
    for branch in $@; do
        gdel $branch
    done
}
delete-branches-remote() {
    for branch in $@; do
        gdelr $branch
    done
}
new-branch-h() { echo "Usage e.g. : new-branch fix 101 branch-description-here" } # new branch TYPE ID DESCRIPTION
new-branch() { 
    if [ $# -eq 0 ]; then
        new-branch-h
    else
        git checkout -b "$1/WEB-$2-$3"
    fi
} 
ytll() {
    yt; # alias
    for link in $@; do
        youtube-dl $link
    done
}