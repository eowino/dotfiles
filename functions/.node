
pkg-version() { node -p "require('./package.json').version" }

node-name() { node -p "require('./package.json').name" }

cp-node-name() { node-name | tr -d '\n' | pbcopy }

node-scripts() { node -p "JSON.stringify(require('./package.json').scripts, null, 2)" }

node-deps() { node -p "require('./package.json').dependencies" }

node-deps-dev() { node -p "require('./package.json').devDependencies" }

npm-latest() { npm info "$1" | grep latest; }

npm-next() { npm info "$1" | grep next; }

node-init() { mkdir "$@" && cd "$@" && npm init -y || exit; }

save-exact() {
    if [ $# -eq 0 ]; then
        echo "Usage e.g. : save-exact <package name> <version without @ symbol> i.e. save-exact react 16.8.6"
    else
        npm install "$1@$2" --save-exact
    fi
}

function node-dir-error() {
    echo "package.json not found in $PWD"
}

function ni() {
    FILE="package.json"
    if [ -f "$FILE" ]; then
        npm install
    else 
        node-dir-error
    fi
}

function save() {
    FILE="package.json"
    if [ -f "$FILE" ]; then
        npm install --save $@
    else 
        node-dir-error
    fi
}

function dev() {
    FILE="package.json"
    if [ -f "$FILE" ]; then
        npm install --save-dev $@
    else 
        node-dir-error
    fi
}

function unsave() {
    FILE="package.json"
    if [ -f "$FILE" ]; then
        npm uninstall --save $@
    else 
        node-dir-error
    fi
}

function undev() {
    FILE="package.json"
    if [ -f "$FILE" ]; then
        npm uninstall --save-dev $@
    else 
        node-dir-error
    fi
}

npm-install-globals() {
    npm install -g yalc version-cli trash-cli release-automation http-server corre
}

search-node-modules() {
     if [ $# -eq 0 ]; then
        echo "Usage e.g. : search-node-modules <node-package-name>"
    else
        tree -d -L 1 "node_modules/$1"
    fi
}

pulls() {
    node -p "
        const execSync = require('child_process').execSync;
        const [remote] = execSync('git remote -v').toString().split('\n');
        const [, repo] = /:(.*)(?=.git)/g.exec(remote);
        const url = 'https://github.com/' + repo + '/pulls';
        execSync('open ' + url);
    "
}